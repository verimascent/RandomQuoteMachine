{"version":3,"sources":["API.ts","App.styles.ts","components/QuotesCard.styles.ts","components/QuotesCard.tsx","App.tsx","index.tsx"],"names":["Quotes","_id","tags","content","author","authorSlug","length","dateAdded","dateModified","fetchQuotes","a","fetch","getUrl","json","data","GlobalStyle","createGlobalStyle","BodyWrapper","styled","body","props","keyframes","undefined","colorBody","ComponentWrapper","div","col","fade","QuotesCard","quote","callback","colors","isLoading","MyLoader","id","backgroundColor","foregroundColor","x","y","rx","ry","width","height","className","href","target","icon","faTwitter","onClick","App","useState","loading","setLoading","flip","setFlip","setQuote","setColors","isFadeOut","setIsFadeOut","generateNewQuote","newQuote","useEffect","prev","colorGenerate","Math","floor","random","b","c","generateNewColor","myColors","push","myPrev","newColors","concat","pop","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a2ce58b.chunk.js","sourcesContent":["export class Quotes {\n    _id: string = \"\";\n    tags: string[] = [];\n    content: string = \"\";\n    author: string = \"\";\n    authorSlug: string = \"\";\n    length: number = 0;\n    dateAdded: string = \"\";\n    dateModified: string = \"\";\n}\n\nexport const fetchQuotes: () => Promise<Quotes> = async () => {\n    const url: string = \"https://api.quotable.io/random\";\n    const getUrl: Response = await fetch(url);\n    const data: Quotes = await getUrl.json();\n\n    return data;\n}","import styled, { createGlobalStyle, Keyframes, keyframes } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    * {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n`;\n\ninterface IColors {\n    colorBody: string[][];\n}\n\nconst changeColor: (props: any) => Keyframes = (props: any) => keyframes`\n    from {\n        background-color: ${ props.colorBody == undefined? \"rgb(255,255,255)\" : \n                             props.colorBody.length === 2 ? props.colorBody[1][0] : props.colorBody[0][0] };\n    }\n    to {\n        background-color: ${props.colorBody == undefined ? \"rgb(255, 255, 255)\" : props.colorBody[0][0]};\n    }\n`;\n\nexport const BodyWrapper = styled.body<IColors>`\n\n    display: flex;\n    animation: ${changeColor} 1.5s ease forwards;\n    height: 100vh;\n    justify-content: center;\n   \n`;\n\n","import styled, { keyframes, Keyframes } from 'styled-components';\n\ninterface IComponentWrapper {\n    col: string[][];\n    fade: boolean;\n}\n\nconst changeColor: (props: any) => Keyframes = (props: any) => keyframes`\n    from {\n        background-color: ${ props.col.length === 2 ? props.col[1][1] : props.col[0][1]};\n    }\n    to {\n        background-color: ${props.col[0][1]};\n    }\n`;\n\nconst fadeInOut = (props: any) => keyframes`\n    from {\n            opacity: ${ props.fade ? 1 : 0 }\n    }\n\n    to {\n            opacity: ${ props.fade ? 0 : 1 }\n    }\n`\n\nexport const ComponentWrapper = styled.div<IComponentWrapper>`\n    align-self: center;\n\n    #background {\n        /* background-color: $; */\n        width: 60vw;\n        min-height: 10rem;\n        display: flex;\n        flex-direction: column;\n        border-radius: 3rem;\n        animation: ${changeColor} 1.5s ease forwards;\n        \n    }\n\n    #quote-box {\n        color: ${props => props.col[0][0] };\n        align-self: stretch;\n        width: auto;\n        height: 100%;\n        padding: 10vh 10vw 5vh 10vw;\n        display: flex;\n        flex-direction: column;\n        \n    }\n    #text {\n        font-size: 1.5rem;\n    }\n\n    #author {\n        margin-top: 3vh;\n        align-self: flex-end;\n        width: fit-content;\n        font-size: 0.9rem;\n    }\n\n    #text, #author {\n        animation: ${fadeInOut} 1s;\n        /* transition: opacity 1s ease; */\n    }\n\n    .button-box {\n        height: 3rem;\n        display: grid;\n        margin-top: 3rem;\n        grid-template-columns: 1fr 1fr;\n    }\n\n    .button-box .twitter {\n        margin-top: 0.5rem;\n        font-size: 3rem;\n        line-height: 100%;\n    }\n\n    .button-box .twitter a {\n        text-decoration: none;\n        color: white;\n    } \n\n    .button-box button {\n        justify-self: self-end;\n        padding: 0.75rem 0.75rem;\n        width: fit-content;\n        background-color: yellow;\n        box-shadow: inset 1px 1px 10px #333;\n        border-radius: 1rem;\n    }\n`","import React from 'react';\nimport { ComponentWrapper } from './QuotesCard.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport ContentLoader from 'react-content-loader'\n \ninterface Props {\n    author: string;\n    quote: string;\n    callback: React.MouseEventHandler;\n    colors: string[][];\n    isLoading: boolean;\n    fade: boolean;\n}\n\nconst QuotesCard: React.FunctionComponent<Props> = ({\n    author,\n    quote,\n    callback,\n    colors,\n    isLoading,\n    fade,\n}) => {\n    \nconst MyLoader = () => (\n    <>\n        <div id=\"author\"></div>\n        <ContentLoader backgroundColor=\"rgba(145, 145, 145, 0.2)\" foregroundColor=\"rgba(255, 255, 255, 0.2)\">\n            <rect x=\"0\" y=\"5\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"25\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"45\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"65\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"85\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"105\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"125\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n        </ContentLoader>\n    </>\n  );\n    return (\n        <>\n            <ComponentWrapper col={colors} fade={fade} >\n                <div id=\"background\">\n                    <div id=\"quote-box\">\n                        {!isLoading && (\n                            <>\n                            <div id=\"text\">{quote}</div>\n                            <div id=\"author\">- {author}</div>\n                            </>\n                        )}\n                        {isLoading && (\n                            <MyLoader />\n                            \n                        )}\n                    \n                        <div className=\"button-box\">\n                            <div className=\"twitter\">\n                                <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\">\n                                    <FontAwesomeIcon icon={faTwitter} />\n                                </a>\n                            </div>\n                            <button id=\"new-quote\" onClick={callback}>New Quote</button>\n                        </div>\n                    </div>\n                    \n                </div>\n            </ComponentWrapper>\n        </>\n    )}\n\nexport default QuotesCard;","import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [flip, setFlip] = useState(true);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n  const [colors, setColors] = useState<Array<Array<string>>>([[]]);\n  const [isFadeOut, setIsFadeOut] = useState(false);\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    // setTimeOut previousState fadeOut we should set isFadeOut \n    setLoading(true);\n    setFlip(!flip);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n    setLoading(false);\n  }\n\n  const generateNewColor: () => string[] = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let color: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther: string = `rgba(${255-a}, ${255-b}, ${255-c}, 1)`;\n    let newColor: string[] = [color, colorOther];\n    \n    return newColor;\n    \n    \n  }\n\n  const handleClick = () => {\n    setIsFadeOut(true);\n    setTimeout(() => {\n      generateNewQuote();\n      setIsFadeOut(false);\n    }, 800);\n    \n  }\n  // const newColor: string[] = generateNewColor();\n\n  \n  // initialize the quote card\n  \n  useEffect(() => {\n    // generateNewColor();\n    // generateNewQuote();\n    setColors(prev => {\n      const colorGenerate: string[] = generateNewColor();\n      const myColors: Array<Array<string>> = [];\n      myColors.push(colorGenerate);\n      const myPrev = [...prev];\n      const newColors: string[][] = myColors.concat(myPrev);\n      if (newColors.length > 2){\n        newColors.pop();\n      }\n      \n      return newColors;\n    });\n  }\n  , [flip]);\n\n  useEffect(() => {\n    // generateNewColor();\n    generateNewQuote();\n    // console.log(colors);\n  }\n  , []);\n\n  \n  // useEffect(() => {\n  //   generateNewQuote();\n  //   generateNewColor();\n  // }\n    \n  // , [flip]);\n\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n  return (\n    <>\n      <GlobalStyle /> \n        <BodyWrapper colorBody={colors}>\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={handleClick} \n            colors = {colors}\n            isLoading = {loading}\n            fade = {isFadeOut} />\n        </BodyWrapper>\n\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}