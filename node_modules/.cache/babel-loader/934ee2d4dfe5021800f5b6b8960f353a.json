{"ast":null,"code":"import _toConsumableArray from\"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchQuotes,Quotes}from'./API';import{GlobalStyle,BodyWrapper}from'./App.styles';import QuotesCard from'./components/QuotesCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),flip=_useState4[0],setFlip=_useState4[1];var _useState5=useState(new Quotes()),_useState6=_slicedToArray(_useState5,2),quote=_useState6[0],setQuote=_useState6[1];var _useState7=useState([[]]),_useState8=_slicedToArray(_useState7,2),colors=_useState8[0],setColors=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isFadeOut=_useState10[0],setIsFadeOut=_useState10[1];var generateNewQuote=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newQuote;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// setTimeOut previousState fadeOut we should set isFadeOut \nsetLoading(true);setFlip(!flip);_context.next=4;return fetchQuotes();case 4:newQuote=_context.sent;setQuote(newQuote);setLoading(false);case 7:case\"end\":return _context.stop();}}},_callee);}));return function generateNewQuote(){return _ref.apply(this,arguments);};}();var generateNewColor=function generateNewColor(){var a=Math.floor(Math.random()*256);var b=Math.floor(Math.random()*256);var c=Math.floor(Math.random()*256);var color=\"rgba(\".concat(a,\", \").concat(b,\", \").concat(c,\", 1)\");var colorOther=\"rgba(\".concat(255-a,\", \").concat(255-b,\", \").concat(255-c,\", 1)\");var newColor=[color,colorOther];return newColor;};var handleClick=function handleClick(){setIsFadeOut(true);setTimeout(function(){generateNewQuote();setIsFadeOut(false);},800);};// const newColor: string[] = generateNewColor();\n// initialize the quote card\nuseEffect(function(){// generateNewColor();\n// generateNewQuote();\nsetColors(function(prev){var colorGenerate=generateNewColor();var myColors=[];myColors.push(colorGenerate);var myPrev=_toConsumableArray(prev);var newColors=myColors.concat(myPrev);if(newColors.length>2){newColors.pop();}return newColors;});},[flip]);useEffect(function(){// generateNewColor();\ngenerateNewQuote();// console.log(colors);\n},[]);// useEffect(() => {\n//   generateNewQuote();\n//   generateNewColor();\n// }\n// , [flip]);\n// make the quote change automatically\n// useEffect(() => {\n//   const timeQuote: NodeJS.Timeout = setInterval(() => {\n//     generateNewQuote();\n//   }, 100000);\n//   // avoid that the timer becomes faster and faster, clear the time interval before\n//   return () => clearInterval(timeQuote)\n// });\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsx(BodyWrapper,{colorBody:colors,children:/*#__PURE__*/_jsx(QuotesCard,{author:quote.author,quote:quote.content,callback:handleClick,colors:colors,isLoading:loading,fade:isFadeOut})})]});};export default App;","map":{"version":3,"sources":["/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/App.tsx"],"names":["React","useState","useEffect","fetchQuotes","Quotes","GlobalStyle","BodyWrapper","QuotesCard","App","loading","setLoading","flip","setFlip","quote","setQuote","colors","setColors","isFadeOut","setIsFadeOut","generateNewQuote","newQuote","generateNewColor","a","Math","floor","random","b","c","color","colorOther","newColor","handleClick","setTimeout","prev","colorGenerate","myColors","push","myPrev","newColors","concat","length","pop","author","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [flip, setFlip] = useState(true);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n  const [colors, setColors] = useState<Array<Array<string>>>([[]]);\n  const [isFadeOut, setIsFadeOut] = useState(false);\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    // setTimeOut previousState fadeOut we should set isFadeOut \n    setLoading(true);\n    setFlip(!flip);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n    setLoading(false);\n  }\n\n  const generateNewColor: () => string[] = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let color: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther: string = `rgba(${255-a}, ${255-b}, ${255-c}, 1)`;\n    let newColor: string[] = [color, colorOther];\n    \n    return newColor;\n    \n    \n  }\n\n  const handleClick = () => {\n    setIsFadeOut(true);\n    setTimeout(() => {\n      generateNewQuote();\n      setIsFadeOut(false);\n    }, 800);\n    \n  }\n  // const newColor: string[] = generateNewColor();\n\n  \n  // initialize the quote card\n  \n  useEffect(() => {\n    // generateNewColor();\n    // generateNewQuote();\n    setColors(prev => {\n      const colorGenerate: string[] = generateNewColor();\n      const myColors: Array<Array<string>> = [];\n      myColors.push(colorGenerate);\n      const myPrev = [...prev];\n      const newColors: string[][] = myColors.concat(myPrev);\n      if (newColors.length > 2){\n        newColors.pop();\n      }\n      \n      return newColors;\n    });\n  }\n  , [flip]);\n\n  useEffect(() => {\n    // generateNewColor();\n    generateNewQuote();\n    // console.log(colors);\n  }\n  , []);\n\n  \n  // useEffect(() => {\n  //   generateNewQuote();\n  //   generateNewColor();\n  // }\n    \n  // , [flip]);\n\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n  return (\n    <>\n      <GlobalStyle /> \n        <BodyWrapper colorBody={colors}>\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={handleClick} \n            colors = {colors}\n            isLoading = {loading}\n            fade = {isFadeOut} />\n        </BodyWrapper>\n\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}