[{"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/index.tsx":"1","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/App.tsx":"2","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/API.ts":"3","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/App.styles.ts":"4","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/components/QuotesCard.tsx":"5","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/components/QuotesCard.styles.ts":"6"},{"size":198,"mtime":1627057959317,"results":"7","hashOfConfig":"8"},{"size":2814,"mtime":1627057959317,"results":"9","hashOfConfig":"8"},{"size":469,"mtime":1627057959314,"results":"10","hashOfConfig":"8"},{"size":852,"mtime":1627057959314,"results":"11","hashOfConfig":"8"},{"size":2492,"mtime":1627057959317,"results":"12","hashOfConfig":"8"},{"size":1999,"mtime":1627057959317,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qam4ze",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/index.tsx",[],"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/App.tsx",["29"],"import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [flip, setFlip] = useState(true);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n  const [colors, setColors] = useState<Array<Array<string>>>([[]]);\n  const [isFadeOut, setIsFadeOut] = useState(false);\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    // setTimeOut previousState fadeOut we should set isFadeOut \n    setLoading(true);\n    setFlip(!flip);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n    setLoading(false);\n  }\n\n  const generateNewColor: () => string[] = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let color: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther: string = `rgba(${255-a}, ${255-b}, ${255-c}, 1)`;\n    let newColor: string[] = [color, colorOther];\n    \n    return newColor;\n    \n    \n  }\n\n  const handleClick = () => {\n    setIsFadeOut(true);\n    setTimeout(() => {\n      generateNewQuote();\n      setIsFadeOut(false);\n    }, 800);\n    \n  }\n  // const newColor: string[] = generateNewColor();\n\n  \n  // initialize the quote card\n  \n  useEffect(() => {\n    // generateNewColor();\n    // generateNewQuote();\n    setColors(prev => {\n      const colorGenerate: string[] = generateNewColor();\n      const myColors: Array<Array<string>> = [];\n      myColors.push(colorGenerate);\n      const myPrev = [...prev];\n      const newColors: string[][] = myColors.concat(myPrev);\n      if (newColors.length > 2){\n        newColors.pop();\n      }\n      \n      return newColors;\n    });\n  }\n  , [flip]);\n\n  useEffect(() => {\n    // generateNewColor();\n    generateNewQuote();\n    // console.log(colors);\n  }\n  , []);\n\n  \n  // useEffect(() => {\n  //   generateNewQuote();\n  //   generateNewColor();\n  // }\n    \n  // , [flip]);\n\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n  return (\n    <>\n      <GlobalStyle /> \n        <BodyWrapper colorBody={colors}>\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={handleClick} \n            colors = {colors}\n            isLoading = {loading}\n            fade = {isFadeOut} />\n        </BodyWrapper>\n\n    </>\n  );\n};\n\nexport default App;\n","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/API.ts",[],"/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/App.styles.ts",["30","31"],"import styled, { createGlobalStyle, Keyframes, keyframes } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    * {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n`;\n\ninterface IColors {\n    colorBody: string[][];\n}\n\nconst changeColor: (props: any) => Keyframes = (props: any) => keyframes`\n    from {\n        background-color: ${ props.colorBody == undefined? \"rgb(255,255,255)\" : \n                             props.colorBody.length === 2 ? props.colorBody[1][0] : props.colorBody[0][0] };\n    }\n    to {\n        background-color: ${props.colorBody == undefined ? \"rgb(255, 255, 255)\" : props.colorBody[0][0]};\n    }\n`;\n\nexport const BodyWrapper = styled.body<IColors>`\n\n    display: flex;\n    animation: ${changeColor} 1.5s ease forwards;\n    height: 100vh;\n    justify-content: center;\n   \n`;\n\n","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/components/QuotesCard.tsx",["32"],"import React from 'react';\nimport { ComponentWrapper } from './QuotesCard.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport ContentLoader from 'react-content-loader'\n \ninterface Props {\n    author: string;\n    quote: string;\n    callback: React.MouseEventHandler;\n    colors: string[][];\n    isLoading: boolean;\n    fade: boolean;\n}\n\nconst QuotesCard: React.FunctionComponent<Props> = ({\n    author,\n    quote,\n    callback,\n    colors,\n    isLoading,\n    fade,\n}) => {\n    \nconst MyLoader = () => (\n    <>\n        <div id=\"author\"></div>\n        <ContentLoader backgroundColor=\"rgba(145, 145, 145, 0.2)\" foregroundColor=\"rgba(255, 255, 255, 0.2)\">\n            <rect x=\"0\" y=\"5\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"25\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"45\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"65\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"85\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"105\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n            <rect x=\"0\" y=\"125\" rx=\"4\" ry=\"4\" width=\"40vw\" height=\"13\" />\n        </ContentLoader>\n    </>\n  );\n    return (\n        <>\n            <ComponentWrapper col={colors} fade={fade} >\n                <div id=\"background\">\n                    <div id=\"quote-box\">\n                        {!isLoading && (\n                            <>\n                            <div id=\"text\">{quote}</div>\n                            <div id=\"author\">- {author}</div>\n                            </>\n                        )}\n                        {isLoading && (\n                            <MyLoader />\n                            \n                        )}\n                    \n                        <div className=\"button-box\">\n                            <div className=\"twitter\">\n                                <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\">\n                                    <FontAwesomeIcon icon={faTwitter} />\n                                </a>\n                            </div>\n                            <button id=\"new-quote\" onClick={callback}>New Quote</button>\n                        </div>\n                    </div>\n                    \n                </div>\n            </ComponentWrapper>\n        </>\n    )}\n\nexport default QuotesCard;","/home/primeminister/Documents/FullStackCodeLearning/thisfold/RandomQuoteMachine/src/components/QuotesCard.styles.ts",[],{"ruleId":"33","severity":1,"message":"34","line":71,"column":5,"nodeType":"35","endLine":71,"endColumn":7,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":17,"column":46,"nodeType":"39","messageId":"40","endLine":17,"endColumn":48},{"ruleId":"37","severity":1,"message":"38","line":21,"column":45,"nodeType":"39","messageId":"40","endLine":21,"endColumn":47},{"ruleId":"41","severity":1,"message":"42","line":57,"column":33,"nodeType":"43","messageId":"44","endLine":57,"endColumn":109,"fix":"45"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateNewQuote'. Either include it or remove the dependency array.","ArrayExpression",["46"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"47","text":"48"},{"desc":"49","fix":"50"},[2076,2076]," rel=\"noreferrer\"","Update the dependencies array to be: [generateNewQuote]",{"range":"51","text":"52"},[2015,2017],"[generateNewQuote]"]